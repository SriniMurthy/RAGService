rag:
  documents:
    path: "classpath:documents/*"
    watch-dir: ${RAG_DROP_FOLDER}
  prompt:
    template: |
      You are a helpful AI assistant that analyzes documents to answer questions accurately.

      CRITICAL REASONING INSTRUCTIONS:
      1. Read ALL provided DOCUMENTS carefully before answering
      2. When questions mention specific timeframes, numbers, or entities:
         - Look for date ranges, time periods, or numeric ranges that CONTAIN the queried value
         - Example: A range "2008-2017" contains the year "2014"
         - Example: A range "$100K-$200K" contains "$150K"
      3. When questions ask for comparisons or changes over time:
         - Identify multiple time periods in the documents
         - Compare information across those periods
      4. Synthesize information across MULTIPLE document chunks if needed
      5. If information spans multiple documents, combine them coherently

      ANSWER GUIDELINES:
      - Provide detailed, specific answers citing information from the DOCUMENTS
      - If the answer is not available in the DOCUMENTS, clearly state:
        "I don't have enough information in the provided documents to answer this question."
      - Do NOT make assumptions or add information not present in DOCUMENTS

      QUESTION:
      {input}

      DOCUMENTS:
      {documents}
spring:
  codec:
    max-in-memory-size: 25MB
  application:
    name: RAGJava
  profiles:
    active: data-ingestion
  datasource:
    url: jdbc:postgresql://localhost:5432/RAGJava
    username: ${SM_USER_NAME}
    password: ${SM_PASSWORD}
    driver-class-name: org.postgresql.Driver
  ai:
    openai:
      api-key: ${OPENAI_API_KEY}
      embedding:
        options:
          retry-template: '#{retryTemplate}'
      chat:
        options:
          model: gpt-4o
    anthropic:
      api-key: ${ANTHROPIC_API_KEY}
      chat:
        options:
          model: claude-3-haiku-20240307
          temperature: 0.7
    vectorstore:
      pgvector:
        schema-name: public
        initialize-schema: false
  docker:
    compose:
      lifecycle-management: start_only

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    shutdown:
      enabled: true

server:
  servlet:
    context-path: /RAG

pdf:
  reader:
    smart: true              # Enable SmartPdfReader
    enable-ocr: true         # Enable Tika/Tesseract fallback
    min-chars-per-page: 50   # Threshold to detect scanned PDFs


app:
  ingestion:
    batch-size: 50
    parallel-embeddings: 5
  retrieval:
    # Hybrid retrieval configuration
    topK: 5                          # Final number of documents to return after reranking
    similarityThreshold: 0.60        # Raised from 0.30 - better precision with hybrid retrieval
    candidateMultiplier: 4           # Retrieve topK * 4 candidates for reranking (e.g., 5 * 4 = 20)

# ===== REAL-TIME FINANCE APIs =====
finance:
  # Agentic Provider Selection (LLM-powered intelligent routing)
  agentic-selection:
    enabled: true  # Set to true to enable LLM-based provider selection
    fallback-on-failure: true  # Fallback to traditional priority-based if agentic selection fails

  # Alpha Vantage (25 requests/day free tier)
  # Get free key at: https://www.alphavantage.co/support/#api-key
  alpha-vantage:
    enabled: true  # Set to true and add your key
    priority: 10 # Highest priority for real-time data
    key: demo
    base-url: https://www.alphavantage.co

  # Finnhub (60 requests/minute free tier = 3600/hour, 86,400/day)
  # Get free key at: https://finnhub.io/register
  # RECOMMENDED: Much higher limits than Alpha Vantage (MOST LIBERAL PROVIDER)
  finnhub:
    enabled: true  # Set to true and add your key
    priority: 20 # Second priority, good for fundamentals
    key: ${FINNHUB_API_KEY}

  # Yahoo Finance (Web scraping, no key needed)
  yahoo:
    enabled: true
    priority: 100 # Low priority fallback

  # Google Finance (Web scraping, no key needed)
  google:
    enabled: true
    priority: 110 # Lowest priority fallback

logging:
  level:
    org.apache.pdfbox.pdmodel.font.FileSystemFontProvider: ERROR

# ===== DYNAMODB CHAT MEMORY CONFIGURATION =====
# Persistent chat history using DynamoDB Local (or AWS DynamoDB)
chat:
  memory:
    dynamodb:
      # Enable DynamoDB-backed chat memory (set to false to use in-memory)
      enabled: true

      # DynamoDB Local endpoint (Docker container on port 8000)
      # Remove this line to use AWS DynamoDB instead
      endpoint: http://localhost:8000

      # AWS Region (required even for DynamoDB Local)
      region: us-west-2

      # Table name for storing chat history
      table-name: chat_history

      # TTL in days - auto-delete conversations older than X days
      # Set to 0 for no expiration (messages kept indefinitely)
      ttl-days: 7
